# CA server parameters
#
server:
        # current version of the CA
        version: "0.1"

        # limits the number of operating system threads used by the CA
        # set to negative to use the system default setting
        gomaxprocs: -1

        # path to the OBC state directory and CA state subdirectory
        rootpath: "/var/vcap/store/member_service/production"
        cadir: ".membersrvc"

        # port the CA services are listening on
        port: ":50051"

        # TLS certificate and key file paths
        tls:
            cert:
                file:
            key:
                file:

security:
    # Can be 256 or 384
    # Must be the same as in core.yaml
    level: 256

    # Can be SHA2 or SHA3
    # Must be the same as in core.yaml
    hashAlgorithm: SHA3

# Enabling/disabling different logging levels of the CA.
#
logging:
        trace: 0
        info: 1
        warning: 1
        error: 1
        panic: 1

# Default users to be registered with the CA on first launch.  The role is a binary OR
# of the different roles a user can have:
#
# - simple client such as a wallet: CLIENT
# - non-validating peer: PEER
# - validating client: VALIDATOR
# - auditing client: AUDITOR
#
eca:
        # This hierarchy is used to create the Pre-key tree, affiliations is the top of this hierarchy, 'banks_and_institutions' is used to create the key associated to auditors of both banks and
        # institutions, 'banks' is used to create a key associated to auditors of banks, 'bank_a' is used to create a key associated to auditors of bank_a, etc.
        affiliations:
          <% if_p("membersrvc.affiliations") do |affiliations| %>
            <% affiliations.each do |fkey, fval| %>
            <%= fkey %>:
              <% fval.each do |skey, sval| %>
                <%= skey %>:
                <% sval.each do |v| %>
                - <%= v %>
                <% end %>
              <% end %>
            <% end %>
          <% end %>
        users:
                #
                # The fields of each user are as follows:
                #    <EnrollmentID>: <system_role (1:client, 2: peer, 4: validator, 8: auditor)> <EnrollmentPWD> <Affiliation> <Affiliation_Role> <JSON_Metadata>
                #
                # The optional JSON_Metadata field is of the following format:
                #   { "registrar": { "roles": <array-of-role-names>, "delegateRoles": <array-of-role-names> } }
                # The 'registrar' section is used to control access to registration of new users directly via the ECAA.RegisterUser GRPC call.
                # (See the 'fabric/membersrvc/protos/ca.proto' file for the definition of ECAA.RegisterUser.)
                # Note that this also controls who can register users via the client SDK.
                #
                # Only users with a 'registrar' section may be a registrar to register other users.  In particular,
                # 1) the "roles" field specifies which member roles may be registered by this user, and
                # 2) the "delegateRoles" field specifies which member roles may become the "roles" field of registered users.
                # The valid role names are "client", "peer", "validator", and "auditor".
                #
                # Example1:
                #    The 'admin' user below can register clients, peers, validators, or auditors; furthermore, the 'admin' user can register other
                #    users who can then register clients only.
                #
                # Example2:
                #    The 'WebAppAdmin' user below can register clients only, but none of the users registered by this user can register other users.
                #
                # Clients
                <% if_p("membersrvc.clients") do |clients| %>
                  <% clients.each do |client| %>
                  <%= client["name"] %>: 1 <%= client["secret"] %> <%= client["affiliation"] %> <%= client["affiliation_role"] %> <%= client["metadata"] %>
                  <% end %>
                <% end %>

                # Non validators
                <% if_p("membersrvc.non_validators") do |non_validators| %>
                <% non_validators.each do |non_validator| %>
                  <%= non_validator["name"] %>: 2 <%= non_validator["secret"] %> <%= non_validator["affiliation"] %> <%= non_validator["affiliation_role"] %>
                  <% end %>
                <% end %>

                # Validators
                <% if_p("membersrvc.validators") do |validators| %>
                <% validators.each do |validator| %>
                  <%= validator["name"] %>: 4 <%= validator["secret"] %>
                  <% end %>
                <% end %>

                # Auditors

                <% if_p("membersrvc.auditors") do |auditors| %>
                <% auditors.each do |auditor| %>
                  <%= auditor["name"] %>: 8 <%= auditor["secret"] %> <%= auditor["affiliation"] %> <%= auditor["affiliation_role"] %>
                  <% end %>
                <% end %>

tca:
          # Enabling/disabling attributes encryption, currently false is unique possible value due attributes encryption is not yet implemented.
          attribute-encryption:
                 enabled: false
aca:
          # Attributes is a list of the valid attributes to each user, attribute certificate authority is emulated temporarily using this file entries.
          # In the future an external attribute certificate authority will be invoked. The format to each entry is:
          #
          #     attribute-entry-#:{userid};{affiliation};{attributeName};{attributeValue};{valid from};{valid to}
          #
          # If valid to is empty the attribute never expire, if the valid from is empty the attribute is valid from the time zero.
          attributes:
              attribute-entry-0: diego;institution_a;company;ACompany;2015-01-01T00:00:00-03:00;;
              attribute-entry-1: diego;institution_a;position;Software Staff;2015-01-01T00:00:00-03:00;2015-07-12T23:59:59-03:00;
              attribute-entry-2: diego;institution_a;position;Software Engineer;2015-07-13T00:00:00-03:00;;
              attribute-entry-3: jim,;institution_a;company;ACompany;2001-02-02T00:00:00-03:00;;
              attribute-entry-4: jim;institution_a;position;Project Manager;2001-02-02T00:00:00-03:00;;
              attribute-entry-5: binhn,;institution_a;company;ACompany;2015-01-01T00:00:00-03:00;;
              attribute-entry-6: binhn;institution_a;position;Technical Leader;2015-01-01T00:00:00-03:00;;

              # User attributes for asset transfer with roles test located at
              #sdk/node/test/unit/asset-mgmt-with-roles.js
              attribute-entry-7: alice;bank_a;role;client;2016-01-01T00:00:00-03:00;;
              attribute-entry-8: alice;bank_a;account;12345-56789;2016-01-01T00:00:00-03:00;;
              attribute-entry-9: bob;bank_a;role;client;2015-02-02T00:00:00-03:00;;
              attribute-entry-10: bob;bank_a;account;23456-67890;2015-02-02T00:00:00-03:00;;
              attribute-entry-11: assigner;bank_a;role;assigner;2015-01-01T00:00:00-03:00;;

          address: <%= spec.address %>:50051
          server-name: acap
          # Enabling/disabling Attribute Certificate Authority, if ACA is enabled attributes will be added into the TCert.
          enabled: false
pki:
          ca:
                 subject:
                         organization: Hyperledger
                         country: US
